---
title: Classification de toute allure!
subtitle: Une analyse de la relation entre l’étiquette et le cheminement de circuits dans Trackmania Nations Forever utilisant la classification
highlight-style: github
crossref:
  fig-prefix: Figure
  tbl-prefix: Tableau
  ref-hyperlink: true
authors:
  - name: Nicolas Kmita
    affiliation: École secondaire Franco-Cité
bibliography:
  - references.bib
  - packages.bib
bibliographystyle: apa
nocite: |
  @*
notebook-links: false
lang: fr
tbl-cap-location: bottom
format:
  titlepage-pdf:
    fig-pos: "H"
    tbl-pos: "H"
    pdfengine: xelatex
    include-in-header:
      - text: |
          \usepackage{xcolor}
          \usepackage{lipsum}
          \usepackage{glossaries}
          \usepackage{booktabs}
          \usepackage{hyperref}
          \usepackage[capitalise,noabbrev]{cleveref}
          \pagenumbering{gobble}
      - macros.tex
    documentclass: scrreprt
    classoption: ["oneside", "open=any"]
    number-sections: true
    toc: true
    toc-title: "Table des matières"
    lof: false
    lot: false
    titlepage: classic-lined 
    titlepage-logo: "img/car-jump.png"
    titlepage-theme:
      elements: ["\\titleblock", "Nicolas Kmita", "\\vspace{0.8cm}", "\\logoblock", "\\footerblock"] #"\\authorblock", 
      page-align: "center"
      title-style: "doublelinewide"
      title-fontsize: 30
      title-fontstyle: "uppercase"
      title-space-after: "0.1\\textheight"
      subtitle-fontstyle: ["Large", "textit"]
      author-style: "plain"
      author-sep: "\\hskip1em"
      author-fontstyle: "Large"
      author-space-after: "2\\baselineskip"
      affiliation-style: "numbered-list-with-correspondence"
      affiliation-fontstyle: "large"
      affiliation-space-after: "0pt"
      footer-style: "plain"
      footer-fontstyle: ["large", "textsc"]
      footer-space-after: "0pt"
      logo-size: "0.7\\textheight"
      logo-space-after: "1cm"
    titlepage-footer: |
      M. Chabot\
      MDM4U\
      25 octobre 2024\
    keep-tex: true
    geometry:
      - showframe
      - inner=2cm
      - outer=2cm
      - top=3cm
      - bottom=4cm
      - headsep=22pt
      - headheight=11pt
      - footskip=33pt
      - ignorehead
      - ignorefoot
      - heightrounded
    indent: false
---

{{< pagebreak >}}

\pagenumbering{arabic}

```{r}

# Préparation de librairies et installations variés

cran_mirror <- "https://mirror.csclub.uwaterloo.ca/CRAN/"

pkgs <- c(
  "tidyverse",
  "ggbeeswarm", # Génère des graphique d'essaim d'abeille
  "viridis", # Couleurs pouvant être mieux perçus
  "kableExtra",
  "rmarkdown",
  "knitr", # Tableaux
  "tinytex",
  "reshape",
  "ggh4x",
  "reticulate",
  "rjson",
  "janitor"
)

# Charger les « packages » et, s'ils ne sont pas installés, les installer du mirroir de CRAN indiqué ci-haut (UWaterloo par défaut).
for(pkg in pkgs) {
  # Voir https://stackoverflow.com/questions/4090169/elegant-way-to-check-for-missing-packages-and-install-them

  if(require(pkg, character.only=TRUE)){
    next
  }

  install.packages(pkg, repos=cran_mirror)
  library(pkg, character.only=TRUE)
}
# update.packages(ask = FALSE, repos=cran_mirror)

# Assurer la présence de TinyTeX
if (nchar(tinytex_root()) <= 0) {
  install_tinytex()
}

# Génération de citations
knitr::write_bib(pkgs, prefix="", file="packages.bib", tweak=FALSE)
```

```{r}
# Assurer l'utilisation des virgules par les sorties

inline_hook_old <- knit_hooks$get("inline")

format_d <- function(x) {
  if (is.numeric(x)) {
    return(str_replace_all(str_replace_all(sprintf("%.2f", x), "[.]", ","), ",00", ""))
  }

  return(x)
}

kable_fr <- function(x, ...) {
  # Alignement selon la type de valeur
  alignment <- ""
  for(i in 1:ncol(x)) {
    if (is.numeric(x[,i])) {
      alignment <- paste(alignment, "r", sep="")
    } else {
      alignment <- paste(alignment, "l", sep="")
    }
  }

  x %>%
    mutate_all(~format_d(.)) %>%
    kable(align=alignment, "pipe", ...)
}

decimal_hook <- function (x) {
  if (is.numeric(x) | is.double(x) | is.integer(x)) {
    # Si un entier, imprimer sans ponctuation decimale; autrement ajouter deux chiffres décimaux
    res <- ifelse(x == round(x),
      sprintf("%d", x),
      str_replace_all(sprintf("%.2f", x), "[.]", ",")
    )
    paste(res, collapse = ", ")
  } else {
    inline_hook_old(x)
  }
}

knit_hooks$set(inline = decimal_hook)
```

```{r}
# Préparation aesthétique

theme_set(theme_classic())

# Échellex de couleur


# Utilisation d'une graine aléatoire déterminée
set.seed(3142)

```

```{r}
# Fonctions générales

# Mode pour les facteurs
Mode <- function(x) {
  ux <- unique(x)
  return(ux[which.max(tabulate(match(x, ux)))])
}
```

```{r}
#| echo: FALSE

flat_data <- 
  read.csv("./collected-data/flat-replay-data-5rep.csv", header=TRUE) %>%
  mutate(
    Tag=recode(Tag,
      `0`="Normal",
      `3`="Offroad",
      `5`="Fullspeed",
      `6`="LOL",
      `7`="Tech",
      `8`="SpeedTech",
      `10`="PressForward",
      `12`="Grass",
    )
  )

flat_data_min <- apply(flat_data, 2, min)
flat_data_max <- apply(flat_data, 2, max)

norm2 <- function(x, na.rm = FALSE) (x - min(x, na.rm = na.rm)) / (max(x, na.rm = na.rm) - min(x, na.rm = na.rm))
normalized_flat_data <- flat_data %>% mutate_if(is.numeric, norm2)
```

# Glossaire

\textbf{API}\quad{} Une API, soit une interface de programmation d’applications, est l’interface entre un programme et un autre. Dans le cas de cet article, l’API de TMNF-X est l’interface utilisée pour communiquer avec la base de données de TMNF-X.

\quad

\textbf{Étiquette}\quad{} L’étiquette, ou « tag » en anglais, est le descripteur principal d’un circuit. Il n’y a pas de définitions officielles des différentes étiquettes de Trackmania Nations Forever, toutefois, l’installation Trackmania 2020 a été fournie quelques définitions des mêmes étiquettes. Les définitions fournies pour Trackmania 2020 ne sont pas compatibles avec TMNF en raison des différences majeures entre les deux installations.

Le nom étiquette peut mener à confusion en discutant de modèles de classification puisqu’il y a la classification à classes multiples et à étiquettes multiples. Les deux catégories de modèles sont entièrement différentes. Le modèle d’amplification de gradients que nous utilisons plus tard dans ce rapport utilise des classes multiples. Ainsi, l’utilisation du terme « étiquette » en discutant du modèle fait référence aux étiquettes de Trackmania et non des étiquettes par rapport aux statistiques.

\quad

\textbf{TMNF}\quad{} TMNF est l’abréviation du titre Trackmania Nations Forever, le jeu de course d’arcade analysé dans ce rapport.

\quad

\textbf{TMNF-X}\quad{} Le site Internet a pour but de partager, entre joueurs, les créations reliées à Trackmania Nations Forever.

\quad

\textbf{Trackmania 2020}\quad{} L’installation du jeu Trackmania publié en 2020.

\quad

\textbf{Rediffusion}\quad{} Une rediffusion du chemin que parcourt un joueur. Aussi appelée « replay ».

# Introduction {#sec-intro}

Trackmania Nations Forever est la neuvième installation dans la série de jeux vidéo Trackmania. Ce jeu de course d’arcade, sortie en 2008, n’a que quatre entrées possibles: avancer, reculer, tourner vers la gauche, et tourner vers la droite. C’est ainsi un jeu très abordable pour des débutants. Il y a pourtant diverses fonctionnalités internes qui lui donnent un plafond de compétences très élevé.

L’analyse statistique est très courante dans la série Trackmania afin de s’améliorer au jeu, pour pousser les limites du possible, ou simplement pour explorer une curiosité. Des joueurs, tels que JstAnothrVirtuoso [@JstAnothr] et Yosh [@Yosh], et des projets comme Linesight [@Linesight] sont de bons exemples. Ces deux derniers ont même agi comme sources d’inspiration pour le thème général de ce projet. Il y a également des outils tels que TMDojo [@TMDojo] pour l’installation Trackmania de 2020 qui servent à donner de la rétroaction rapide aux joueurs sur des circuits variés.

Les joueurs peuvent créer leurs propres circuits, ainsi que de les publier sur des plateformes telles que Trackmania Nations Forever Exchange, abrégé à TMNF-X. Les auteurs catégorisent leur circuit selon le style et but, soit sous une étiquette. Il est à noter que les étiquettes n’ont pas de définitions exactes, et que plus d’une étiquette peut être assignée par circuit. Des étiquettes pourraient être « Fullspeed », « LOL » ou un certain nombre d’autres qui sont indiquées dans la [Section @sec-method].

Les étiquettes sont donc choisies selon l’opinion subjective de l’auteur des étiquettes les plus appropriées. Les auteurs utilisent leur interprétation des différences entre les caractéristiques de chaque étiquette de circuit. Il est ainsi à se demander quelles caractéristiques principales du cheminement de la voiture influencent l’étiquette du circuit. Cette étude explore les relations entre le cheminement de la voiture et l’étiquette du circuit.

## Définir un joueur compétent {#sec-competent}

Il faut d’abord définir les joueurs compétents, ceux auxquels les rediffusions seront tirées.

Un joueur compétent devra être assez pratiqué à Trackmania Nations Forever afin de bien représenter un circuit donné. Un joueur non compétent, au contraire, ne pourra pas effectivement compléter un circuit sans faire des actions aberrantes, telles qu’entrer en collision avec des murs ou ralentir la voiture. Ce contraste permet de définir un joueur compétent par négation: c’est un joueur qui ne fait peu d’erreurs.

Notez que cette définition est subjective et ne représente pas tous les joueurs compétents. C’est une définition à but d’augmenter la représentativité du circuit par le cheminement de la voiture du joueur considéré compétent.

La sélection de rediffusions de joueurs compétents est embrouillée par le manque d’informations contextuelles ; le rang du joueur, son temps total dans le jeu, et autres tels critères ne sont pas facilement découvrables en cherchant un circuit donné et, plus important encore, ces critères identifieraient les joueurs. Il est donc à faire recours à des critères présentés pour chaque fichier de rediffusion.

Nous avons choisi de filtrer selon le nombre de joueurs ayant soumis une rediffusion pour un circuit donné sur TMNF-X. Ce critère est (assez) simple à filtrer au travers de l’API de TMNF-X et permet aux rediffusions de rapprocher le cheminement le plus représentatif du circuit. Le plus de rediffusions soumises, le plus haut le niveau de compétition et, donc, le plus représentatif la rediffusion. Afin de bien équilibrer une sélection représentative des circuits^[Une filtration trop restrictive limitera les circuits sélectionnés à ceux qui sont très fameux, ayant des milliers de rediffusions soumis, plutôt que ceux qui ont une ou deux bonnes rediffusions.] et la qualité des rediffusions^[Les circuits ayant des milliers de rediffusions tendent, de notre expérience, à avoir des rediffusions poussées aux limites du possible.], un joueur compétent sera défini, dans cet article, en tant qu’un joueur tenant le record sur un circuit donné, où ce circuit comporte au minimum cinq records soumis. En choisissant cinq comme nombre minimal de rediffusions, nous espérons minimiser le nombre de records insuffisamment représentatifs d’un circuit par des joueurs ayant moins d’expérience.

Il est à noter qu’il se pourrait, toutefois, que plus de cinq joueurs débutants décident, par chance ou par exprès, de soumettre leurs records sur le même circuit.

## Questions

Cette section couvre les questions provoquant l’étude actuelle.

### Exploration pré-modèle

Il est fort probable que certaines techniques soient discernables avec les variations de variables récoltées. Une telle technique pourrait être la « grass-slide », où la voiture est positionnée à 90° et fait un virage agressif [@Tunachopps]. Dans ce cas, nous estimons une hausse de vitesse angulaire et de vitesse latérale comparée au restant du circuit. D’autres techniques/bogues potentiellement discernables seraient la « edge-bogue », la « uber-bogue » et la « nose-bogue » qui changent drastiquement le vecteur vitesse^[Pour une démonstration, voir la vidéo par Kimura et al.]. Un aperçu de la distribution de bogues ou autres provoquant de grands changements sera visible par des graphiques à violons multiples de la différence maximale et moyenne de vecteur vitesse selon l’étiquette et de la différence maximale et moyenne de vitesse latérale selon l’étiquette. Sachant que la définition de l’étiquette « PressForward » dans Trackmania 2020 indique la présence d’acrobaties normalement impossibles manuellement, il est probable que de tels changements drastiques de vitesse soient présents.

## Quel modèle de classification servira le mieux ? {#sec-which-model-hypothesis}

Plusieurs méthodes de classification de points de données existent, ayant tous leurs cas d’utilisation, avantages et désavantages différents. Pour le cas de la classification du cheminement dans une étiquette, il y a cinq exigences principales.

Le modèle doit d’abord \textbf{classifier de manière tabulaire} afin de pouvoir utiliser les données récoltées (« What is Tabular Classification? »). De tels modèles sont les Transformeurs tabulaires et k-NN [@KeitaIntroClassification], etc.

Afin de réduire la complexité de l’analyse et de mener à un meilleur contraste entre les étiquettes, le modèle devra \textbf{prédire une étiquette}. Le modèle devrait pouvoir faire de la classification à classe multiple afin de gérer le nombre d’étiquettes possibles plus grand que deux^[Soit une variable nominale non binaire.] [@KeitaIntroClassification]. En raison de la nécessité d’une exclusivité mutuelle entre les classes [@KeitaIntroClassification] pour la classification à classes multiples, les circuits sélectionnés devront être filtrés afin de ne garder que les circuits ayant une seule étiquette assignée. De tels algorithmes, lorsque mis en série, sont la forêt aléatoire, Bayes naïf, k-NN et amplification de gradients. Il est à noter que la classification à étiquette multiple, telle que l’amplification de gradients multiétiquettes [@KeitaIntroClassification], serait préférable afin de prédire et gérer plusieurs étiquettes simultanément. Toutefois, ceci mènerait à une complexité hors de la portée de ce projet.

Le modèle serait préférablement un \textbf{apprenant avide} afin de présenter des tendances dans les données plutôt que de simplement prédire selon les points de données les plus proches [@KeitaIntroClassification]. Une majorité des modèles respectent cette exigence, notamment à l’exception du modèle k-NN qui est relativement simple comparé aux autres modèles, mais qui cherche le voisin le plus près.

Le modèle devrait préférablement être \textbf{explicable}, soit par l’utilisation d’une IAX^[Intelligence artificielle explicable] [@KeitaIntroClassification]. Puisque l’étude actuelle vise non seulement à prédire l’étiquette, mais également à comprendre ce qui influe un choix d’étiquette, il est préférable qu’une interprétabilité soit facilitée pour le modèle choisi^[Notez également que l’Europe a des réglementations, telles que le Règlement général sur la protection des données [@KeitaIntroClassification], qui mandatent l’explication de décisions automatisées.]. Les IAXs sont habituellement des outils post-prédiction servant à expliquer le raisonnement d’un modèle, donc elles peuvent fonctionner avec une majorité des modèles existants. Des exemples de techniques IAX sont SHAP [@AwanIntroSHAP], LIME et l’explication contrefactuelle [@KeitaIntroClassification].

Combinant toutes ces exigences, peu de modèles restent^[De la liste des modèles trouvés lors de recherches.]. La combinaison de techniques et de modèles qui, sans analyser les données profondément d’avance, est prévue être la plus exacte et précise suit. Soit un modèle d’arbre de décisions à classes multiples [@KattackMultiLabel], soit d’amplification de gradient à classes multiple [@KeitaIntroClassification], servira probablement^[La profondeur des subtilités de chaque méthode diminue la certitude de la méthode la plus représentative.] le mieux pour classifier les nombreuses étiquettes. Si la méthode choisie n’incorpore pas une explicabilité, telle que dans le cas de l’amplification de gradient sans modifications [@XGBoostMultiOutput], la technique IAX SHAP [@AwanIntroSHAP] est prédite de permettre la meilleure explication des choix prise par le modèle.

Afin de déterminer le modèle le plus représentatif, les modèles peuvent être comparés entre eux par moyen de leur précision, exactitude, sensibilité, spécificité, score F1, ou courbe ROC^[Certains indicateurs dépendent de distributions particulières des valeurs prédites. Par exemple, la spécificité est préférée lorsqu’il y a plus de faux positifs que de faux négatifs.] [@KeitaIntroClassification].

Un modèle de simulacre sera d’abord utilisé afin d’assigner un point de départ. Un modèle de régression logistique sera, ensuite, utilisé comme modèle simple et souvent efficace. Finalement, un modèle d’amplification de gradients est prévu être le plus représentatif.

## Que peut être déduit au sujet des affectants de l’étiquette résultante grâce aux modèles ?

Utilisant les définitions fournies pour Trackmania 2020 comme base, nous croyons que l’étiquette « Fullspeed » pourrait être différentiable par la vitesse vers l’avant élevée en raison de l’appui constant sur l’accélérateur et des virages prolongés [@Eyebo2024], le roulis en raison des « wallrides » et le déplacement total en raison du peu de virages courts.

Le « Tech » et le « SpeedTech » se distingueraient par leur grand nombre de dérives afin de compléter des virages serrés. Comme décrite par la première loi de Newton, l’inertie de la voiture lors d’un virage vers, par exemple, la gauche incitera la voiture à déraper vers la droite, ce qui augmenterait la vitesse latérale opposée au pilotage [@BertrandNewton]. La vitesse latérale et le pilotage pointeraient donc souvent dans les sens opposés.

La vérification de ces hypothèses se fait par moyen d’une analyse du modèle explicable décrite dans la [Section @sec-which-model-hypothesis].


# Méthodologie {#sec-method}

La population de cette étude est comprise des circuits publiés sur TMNF-X [@TMNFX] ayant une seule étiquette assignée, et ne nécessitant aucune modification du jeu telle que TMUnlimiter [@TomekUnlimiter]. Ces circuits sont également du type « Race », puisque c’est le seul type permettant une course habituelle. La taille de la population sera ainsi d’environ 600 000 circuits^[Ceci est une approximation selon le nombre total de circuits [@TMNFXStats].]. Le record mondial sur chaque circuit en est inclus.

Passant à l’échantillon, seules les étiquettes { \textcolor{gray}{Normal, Offroad, Fullspeed, LOL, Tech, SpeedTech, PressForward, Grass} } sont analysées dès la liste d’étiquettes, soit { \textcolor{gray}{Normal, Stunt, Maze, Offroad, Laps, Fullspeed, LOL, Tech, SpeedTech, RPG, PressForward, Trial, Grass} }. Les étiquettes exclues vont à l’encontre du but de l’étude, ne pourraient pas raisonnablement être analysées dans les délais prescrits, ou les deux cas simultanément. Les raisons d’exclusions précises à chaque étiquette se trouvent dans le Tableau 3.1 qui suit.

\begin{table}[H]
\centering
  \begin{tabular}{ll}
  \toprule
  Étiquette & Raison d'exclusion \\
  \midrule
  Stunt & Le but n’est pas la vitesse, mais plutôt un score de cascade. \\[10pt]
  Maze  & Le but est de trouver le bon chemin et, ayant plusieurs chemins \\
        & valides, le circuit n’est souvent pas ordonné. \\[10pt]
  Laps  & Le même circuit est complété plus d’une fois. \\[10pt]
  RPG   & L’étiquette comporte majoritairement des circuits durant des \\
        & heures de suite, ayant des différences de quelques heures \\
        & entre chaque record. \\[10pt]
  Trial & L’étiquette est définie par la difficulté extrême et la longue \\
        & durée des circuits (iBazztyB, et al, s. d.). \\
  \bottomrule
  \end{tabular}
\caption{Les raisons d’exclusion d’étiquettes de l’échantillon.}
\label{Exclusions}
\end{table}

Les données récoltées de cette étude observationnelle sont d’abord stratifiées selon l’étiquette de chaque circuit, choisissant aléatoirement ≥1113 circuits par strate. Ceci permet d’atteindre et dépasser la taille minimale pseudo-magique de 30 échantillons tout en ne prenant pas une durée non raisonnable à décortiquer les fichiers avec le programme de l'[Annexe -@sec-annex-a]. Ensuite, le record sur chaque circuit, soit la rediffusion ayant le temps de terminaison le plus bas, est tiré dès l’API du site TMNF-X. Seuls les circuits ayant plus de cinq rediffusions soumis sur TMNF-X sont considérés. Ces deux dernières conditions visent à diminuer le nombre de rediffusions à moitié effort entrant dans l’échantillon, ce qui permet une meilleure représentativité du chemin du circuit, comme décrit dans la @sec-competent. Après l’échantillonnage, les rediffusions sont analysées^[Dans le sens de décortiquer le fichier, ou « parse » en anglais.] afin de ressortir les métadonnées et calculer d’autres renseignements utiles, soit de procurer la variable dépendante et les variables indépendantes et confondantes. L’[Annexe -@sec-annex-a] présente le programme appliquant la stratégie d’échantillonnage et d’analyse^[Dans le sens de décortiquer le fichier, ou « parse » en anglais.] de rediffusions décrite^[Notez qu’il est possible de voir les résultats sans exécuter le code en visionnant le fichier `MainCodebase.ipynb`.].

## Sources des données

Les données de chaque circuit et rediffusion sont tirées dès le serveur de TMNF-X. L’étiquette est indiquée directement dans les informations de chaque circuit; la durée du circuit se trouve dans les informations extraites de la rediffusion; puis le restant des données sont ressorties de chaque échantillon de l’état du jeu^[Trackmania Nations Forever sauvegarde un aperçu approximatif du jeu à chaque 100 millisecondes dans chaque fichier de rediffusion.]. Un aperçu plus détaillé des variables se trouve dans l’[Annexe -@sec-annex-b].

TMNF-X est à la fois une source primaire et secondaire. Des données telles que le type de circuit sont tirées dès l’API de TMNF-X, ce qui lui rend une source secondaire. D’autres données sont récoltées directement dès les fichiers de rediffusion des circuits stockés sur TMNF-X^[Les fichiers de rediffusion sont stockés sur les serveurs de TMNF-X, mais l’API de TMNF-X n’expose pas les données de ces rediffusions.], ce qui le rend également une source primaire.

## Validité des données récoltés du jeu

Puisque les données sont extraites d’un fichier créé par le jeu lui-même^[Après avoir complété un circuit, TMNF permet de sauvegarder une rediffusion afin de visionner de nouveau le cheminement qu’a pris un joueur. Cette rediffusion est stockée sous forme de fichier « .Replay.Gbx ».], elles devraient être très similaires à ce qu’interprète le jeu.

Toutefois, l’utilisation d’un outil d’extraction majoritairement écrit par la communauté — soit GBX.NET2 —, et non pas par les créateurs du jeu, pourrait influer des variations de ce qui est supposé être interprété lors de l’analyse^[Dans le sens de décortiquer le fichier, ou « parse » en anglais.] du fichier. Il est à noter que les fichiers sont encodés et que les sections pertinentes sont interprétées selon ce qu’ont découvert les créateurs de l’outil GBX.NET2 [@GBXNET].

Il y a également certains calculs lors de la récolte des données qui pourraient influer d’autres variations. Un tel calcul sert à convertir le quaternion de rotation de la voiture en tangage, lacet et roulis, soit vers l’espace Euler. Utilisant l’arc tangent et l’arc sinus, avec des nombres à point décimal flottant, des déviations minimes en raison d’arrondissement erroné pourraient survenir [@FloatingPoint].

## Entraînement des modèles prédictifs

Les données hiérarchiques, soit contenues dans des échantillons de temps, sont aplaties afin de pouvoir être traitées par les modèles. Des caractéristiques principales, soit les variables de l’[Annexe -@sec-annex-c], sont calculées d’après les variables extraits de TMNF-X et les fichiers de rediffusions, soit les variables de l’[Annexe -@sec-annex-b].

Ces données sont échantillonnées également entre chaque étiquette. Le nombre de circuits « Normal » échantillonnés est égal à celui des circuits « Offroad » qui est, lui aussi, égale à celui des circuits « Fullspeed », etc. Ceci prévient certains biais résultant de déséquilibres dans la quantité de données pour chaque étiquette. Ceci prévient également la nécessité de rééchantillonnage^[Exemples: rééchantillonnage par grappe, sous-rééchantillonnage, suréchantillonnage SMOTE [@KeitaIntroClassification; @ChawlaAIResearch].] [@KeitaIntroClassification; @ChawlaAIResearch pp. 322] ou de modèles spécialisés qui prennent en compte les coûts de la classification incorrecte^[Tels que les machines à support vectoriel sensible aux coûts [@SVM2019].].

Les données sont d’abord séparées en groupes d'entraînement et de test. Ceci prévient le surajustement des modèles sur les données d’entraînement. L’utilisation de données externes de ceux qui servent à entraîner donne un indice de ce qu’a vraiment compris le modèle. Le but n’est pas d’entraîner des modèles qui mémorisent les réponses, mais plutôt d’entraîner des modèles pouvant suivre des motifs et généraliser; interpoler et extrapoler.


# Analyse {#sec-analyse}

## Exploration pré-modèle

En premier lieu, il n’y a aucune valeur manquante. Les échantillons sont récoltés dès TMNF-X qui, avant d’accepter une soumission de rediffusion ou de circuit, assure sa validité. La présence de fichier corrompu est donc rare, n’apparaissant aucune fois lors de l’échantillonnage. De plus, les cas où l’API de TMNF-X répond à la requête de fichier avec une erreur sont gérés par le programme de l’[Annexe -@sec-annex-a]. Si une requête renvoie continuellement des erreurs, le circuit est sauté puisqu’aucune information ne peut être récoltée. Le manque de valeurs manquantes suggère ainsi le bon fonctionnement du programme d’échantillonnage.

Nous pouvons comparer les distributions de chaque variable selon la variable, soit le but de la @fig-violin-facet.

```{r}
#| label: fig-violin-facet
#| fig-pos: 't'
#| echo: FALSE
#| fig-cap: "Les distributions relatives (relatives aux minimums et maximums) des valeurs de chaque variable selon l'étiquette. Les barres rouges représentent l'écart type distancé de la moyenne."
#| fig-width: 8
#| fig-height: 10
#| out-width: '100%'
#| fig-align: 'center'
#| layout-nrow: 1

# TODO: Add units
facet_ordered_colnames <- c("AvgAbsDisplacementHorizontal","AvgAbsDisplacementY","AvgRPM","AvgSteerBias","AvgAbsSteer","AvgSpeedForward","AvgAbsSpeedForward","AvgSpeedSidewardBias","AvgAbsSpeedSideward","AvgSpeedSidewardOppSteer","PercentPitchLowerThird","PercentRollLowerThird","PercentPitchMiddleThird","PercentRollMiddleThird","PercentPitchUpperThird","PercentRollUpperThird","PercentTurbo")

facet_ordered_colours <- c(NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, "#ffb3b333", "#b3dfff33", "#ffb3b333", "#b3dfff33", "#ffb3b333", "#b3dfff33", NA)

flat_data_long <- gather(flat_data, key="measure", value="value", facet_ordered_colnames)# colnames(flat_data)[!(colnames(flat_data) %in% c("Tag"))])

dfTab <- flat_data_long %>% group_by(Tag, measure) %>%
  summarize(
    mean = mean(value),
    sd = sd(value)
  )

ggplot(flat_data_long, aes(x=Tag, y=value)) + #  %>% group_by(Tag)
  # Diagrammes
  # geom_boxplot() +
  # geom_quasirandom(width = 0.2, alpha = 0.2, size=0.2) +
  geom_violin(
    draw_quantiles = c(0.25, 0.5, 0.75),
    size=0.2,
    colour="black",
    fill = NA,
    scale="width"
  ) + # TODO: Find more representative scale type
  facet_wrap2(
    ~forcats::fct_relevel(measure, facet_ordered_colnames),
    scales="free_y",
    ncol=2,
    strip=strip_themed(
      background_x = elem_list_rect(fill = facet_ordered_colours)
    )
  ) +

  # # Écart type / barres d'érreure
  geom_errorbar(
    data=dfTab,
    aes(x=Tag, y=mean, ymin=mean-sd, ymax=mean+sd),
    width=.2,
    linewidth=.2,
    colour="red"
  ) +
  geom_point(data=dfTab, aes(x=Tag, y=mean), size=0.3, colour="red") +
  # # Anotation de l'écart type
  # geom_text(data=dfTab,aes(x=species,y=y,parse=FALSE,label=sprintf("s = %.2f", dfTab$sd)),vjust=0) +

  # Thèmes
  theme(
    axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)
    # legend.position = c(0.10, 0.80),
    # legend.background = element_rect(colour = "black")
  ) +

  # Anotations
  labs(
    title = "Distributions relatives de chaque variable",
    x = "Étiquette",
    y = "Valeur"
  )

```

### Le variant {#sec-variant}

Débutant avec des impressions générales, les circuits « PressForward » ont les plus grandes variances. Ce motif suggère que cette étiquette contient des circuits qui diffèrent grandement entre eux. Ceci est en accord avec notre hypothèse originale selon laquelle la variance serait présente dû à des acrobaties extrêmes. La présence d’acrobaties où la voiture roulerait dans l’air est probablement ce qui a engendré les variations des déplacements horizontaux (`AvgAbsDisplacementHorizontal`) et verticaux (`AvgAbsDisplacementY`), des vitesses vers l’avant (`AvgSpeedForward`) et latérale (`AvgAbsSpeedSideward`), et de l’orientation moyenne de la voiture (`PercentPitch——Third` et `PercentRoll——Third`), démontrées dans la @fig-violin-facet.

Il est également notable que les circuits « PressForward » aient des biais de pilotage (`AvgSteerBias`) et des pilotages totaux (`AvgAbsSteer`) qui varient largement. Si les circuits de cette étiquette suivent exactement le nom — seulement appuyer la touche avant —, il n’y aurait aucun biais et aucun pilotage. Ceci n’est pas le cas, mais il y a également la possibilité qu’une touche directionnelle soit tenue le long du circuit. Dans ce cas, le biais et le pilotage seraient chacun soit 0% ou 100%. Ceci n’est également pas toujours le cas: les variables sont distribuées d’une manière non binaire. Il y a ainsi des joueurs qui modifient leurs entrées lors de leur cheminement. Il est donc plus difficile de déterminer un motif pouvant identifier un circuit « PressForward » au moyen d’un cheminement.

### L’impossibilité {#sec-impossible}

La seule variable sans variance est le pourcentage de roulis se situant dans le tiers le plus haut (`PercentRollUpperThird`). Bien que ceci paraisse être en raison d’un manque de cheminements aberrants plaçant la voiture à l’envers, ce n’est pas le cas. Plutôt, le calcul qui convertit le quaternion de rotation vers le tangage, lacet et roulis priorise le tangage au roulis. Il est ainsi impossible d’avoir un pourcentage élevé de roulis dans le tiers maximal.

### Fullspeed

Les circuits « Fullspeed » ont, en moyenne, les plus grands déplacements horizontaux (`AvgAbs-` `DisplacementHorizontal`), révolutions par minute (`AvgRPM`), vitesses vers l’avant (`AvgSpeedForward`) et vitesses absolues vers l’avant (`AvgAbsSpeedForward`), et sont plus souvent placés dans la zone de roulis parallèle aux murs (`PercentRollMiddleThird`). Ceci supporte nos hypothèses au sujet de l’étiquette « Fullspeed » et la définition dès l'installation du jeu de 2020^[Traduit, « Plein accélérateur le long du circuit. Longs virages fluides. Les boucles, la conduite sur les murs, et similaire sont communes. [...] De hautes vitesses sont attendues. » [@Eyebo2024]]. L’appui constant sur l’accélérateur élèverait les révolutions par minute du moteur et la vitesse vers l’avant (`AvgSpeedForward` et `AvgAbsSpeedForward`). Ajoutés à de hautes vitesses, des virages prolongés pousseront la voiture à traverser une plus grande distance (`AvgAbsDisplacementHorizontal`) durant son cheminement. Les balades murales pourraient, ensuite, être la cause du haussement de temps dans la zone de roulis situant la voiture près de perpendiculaire au sol (`PercentRollMiddleThird`), soit parallèle aux murs.

### Circuits techniques

Nous avons posé l’hypothèse que les circuits ayant les étiquettes « Tech » et « SpeedTech » se distingueraient par des pilotages et vitesses pointant souvent dans des sens inverses. Ceci est, en effet, le cas, visible dans la variable `AvgSpeedSidewardOppSteer`; les deux étiquettes ont des moyennes de moyennes^[C’est la moyenne de moyennes.] de vitesse latérale opposant le pilotage plus élevées comparées aux autres étiquettes.

Plus intrigant encore, et que nous n’avons pas eu comme hypothèse: ces deux étiquettes ont des distributions similaires, se différenciant de manière prévisible. La « SpeedTech » réside à des vitesses (`AvgSpeedForward` et `AvgAbsSpeedForward`), RPMs (`AvgRPM`), durées en turbo (`PercentTurbo`) et déplacements (`AvgAbsDisplacementHorizontal` et `AvgAbsDisplacementY`) moyens légèrement plus hauts que les circuits « Tech », comme ce que suggère l’utilisation du mot « Speed ». Le « Tech », quant à lui, a plus de pilotage (`AvgAbsSteer`). Notez que, dans le jeu, faire des virages serrés, ou même déraper, ralenti la vitesse de la voiture. Les physiques du jeu soutiennent donc que l’augmentation de montant de pilotage du « Tech » réduit sa vitesse préférée, et inversement pour le « SpeedTech ». Les deux styles se basant sur la technique sont donc fortement similaires, se différenciant principalement par leurs caractéristiques de vitesse préférée.

### Le grass-slide

D’abord, nous avons eu l’hypothèse que l’étiquette « Grass » se distinguerait par une hausse de vitesse angulaire et de vitesse latérale. Les distributions de la variable `AvgAbsSpeedSideward`, ou la vitesse latérale absolue moyenne, supportent ceci. La moyenne de celui-ci pour les circuits « Grass » est la plus élevée parmi les autres étiquettes.

## Quel modèle de classification est le plus représentatif ?

Nous avons décidé d’utiliser un modèle d’amplification de gradients à classes multiples comme modèle principal, tel que décrit dans la section « Quel modèle de classification servira le mieux ? ». Les paramètres de ce modèle ont été raffinés afin de l’optimiser. En premier lieu, la profondeur maximale de l’arbre est de cinq afin de prévenir le surajustement du modèle aux données d'entraînement. La mesure d’évaluation que le modèle cherche à optimiser est la perte logistique multiclasse, ayant comme calcul, pour chaque variable individuellement,
$$L_{log}(y,p) = -\left(y\ln{}(p) + \left(1 - y\right)\ln{}\left(1 - p\right)\right)$$
ou
$$L_{log}(y,p) = -\left(y\ln{}(p) + \left(1 - y\right)\ln{}\left(q\right)\right)$$
où $y$ est la valeur réelle, $p$ est la probabilité estimée et $q$ est le pourcentage complémentaire de $p$ [@scikitLogLoss].

Un modèle de régression logistique est, ensuite, utilisé afin d’assurer que la complexité du modèle d’amplification de gradients ne rend pas pire la représentativité potentielle d’un modèle. Ça agit comme un point de référence de modèles plus simples. Afin de ne pas accidentellement mal ajuster les paramètres du modèle de référence, les paramètres n’ont été modifiés que minimalement.

Le dernier modèle, soit le modèle de simulacre, sert comme point de référence minimale. C’est un modèle sans raisonnement qui choisit toujours la même étiquette. Ainsi, un modèle qui performe pire que le simulacre est moins représentatif que deviner. Notez que l’exactitude du modèle de simulacre équivaut l’espérance mathématique de deviner le circuit aléatoirement, soit de $E(X) = \frac{1}{8} = 12,50\%$.

Bien que le modèle le plus complexe semblerait meilleur de première vue, il faut le vérifier. La @fig-model-stats démontre l’exactitude des trois modèles par moyen de matrices de confusions. Notez qu’un modèle parfait n’aurait aucune étiquette mal assignée, et formerait donc une ligne diagonale du haut gauche au bas droit. Notez également que les matrices de confusion sont formées avec les données de test, et non les données d’entraînement, afin de mieux démontrer sa représentativité sur de nouvelles données.

![Les matrices de confusion des trois modèles statistiques utilisés: un simulacre simple, une régression logistique, et un amplification de gradients (XGBoost).](rendered-figs/fig-model-stats.pdf){#fig-model-stats out-width=100% fig-align='center'}

Comme attendu, le modèle de simulacre, qui prédit toujours la même étiquette, n’a que peu de représentativité. Le modèle de régression logistique présente une meilleure représentativité; une ligne diagonale est quelque peu visible. Toutefois, les étiquettes « Fullspeed », « LOL » et « PressForward » sont prédites incorrectement pour plus de la moitié de l’échantillon de test. Le « Tech » est le plus souvent bien prédit. Le modèle d’amplification de gradients surpasse les deux modèles précédents, formant une ligne presque entièrement diagonale, bien corrélée. La seule étiquette qui est très souvent mal prédite est le « LOL ».

Nous pouvons plus concrètement comparer les modèles par moyen de métriques, telles que l’exactitude, la précision et le rappel. L’exactitude est calculée avec la formule
$$\text{Exactitude} = \frac{\text{\# de classifications valides}}{\text{\# de classifications totales}}$$
Ainsi, les modèles ont chacun des exactitudes de $12,50\%$, $63,44\%$ et $84,71\%$ respectivement, comme indiqué dans les sous-titres de la @fig-model-stats. Le modèle d’amplification de gradients est donc généralement le plus représentatif des trois modèles, suivi de loin par la régression logistique et de plus loin encore par le simulacre.

La précision individuelle à chaque étiquette est déterminée par la formule
$$P_{i} = \frac{\text{\# d'échantillons attribués correctement à la classe }i}{\text{\# d'échantillons attribués à la classe }i}$$
Lorsque le nombre d’échantillons est distribué également entre les classes, telle qu’est le cas pour nos données, la formule de la précision moyenne est
$$P = \frac{\displaystyle\sum_{i=1}^{n}P_{i}}{n}$$

Le rappel a une formule similaire, se différenciant par un rapport avec les données valides plutôt que prédites:
$$R_{i} = \frac{\text{\# d'échantillons attribués correctement à la classe }i}{\text{\# d'échantillons appartenant à la classe }i}$$
La formule du rappel moyen est ensuite
$$R = \frac{\displaystyle\sum_{i=1}^{n}R_{i}}{n}$$

La précision et le rappel de chaque classe — soit l’étiquette dans Trackmania — pour chacun des trois modèles sont présentés dans le @tbl-rapport-classification. Notez que la précision de chaque étiquette dans le tableau équivaut au nombre d’échantillons bien prédit divisé par la somme de la colonne, et que le rappel est de même excepté que l’on divise par la somme de la rangée.

```{r}
#| label: tbl-rapport-classification
#| exho: FALSE
#| tbl-cap: "La précision et le rappel de chaque model selon la variable, en pourcentage (%)."
#| out-width: '100%'
#| tbl-align: 'center'

report_df <- read.csv(file="models/report_object.csv", header=TRUE)

report_pivot_df <- report_df %>%
  mutate(
    precision = precision * 100,
    recall = recall * 100,
    f1 = f1 * 100,
    support = support * 100
  ) %>%
  select(model:recall) %>%
  pivot_wider(
    names_glue = "{model}_{.value}",
    names_from=model,
    values_from=c(precision, recall),
    names_sort=TRUE,
    names_vary = 'slowest'
  )

report_pivot_df %>%
  filter(!(variable %in% c("weighted avg"))) %>%
  mutate(
    variable=recode(variable,
      `0.0`="Normal",
      `1.0`="Offroad",
      `2.0`="Fullspeed",
      `3.0`="LOL",
      `4.0`="Tech",
      `5.0`="SpeedTech",
      `6.0`="PressForward",
      `7.0`="Grass",
      `macro avg`="Moyenne"
    )
  ) %>%
  kable_fr(col.names = c("Étiquette", rep(c("Précision", "Rappel"), 3))) %>% #, "F1", "Support"
  add_header_above(
    header=c(" ", 
      "Simulacre"=2, 
      "Régression\nlogistique"=2,
      "Amplification\nde gradients"=2
    )
  ) %>%
  row_spec(9, bold=TRUE, background="#e6e6e6")

```

Nous pouvons constater que le rappel a eu les plus grandes augmentations par le changement du modèle de régression logistique vers l’amplification de gradients. Tandis que la précision voit une augmentation maximale d’environ $30,91\%$ (voir l’étiquette « Grass »), le rappel voit des augmentations d’environ $49,64\%$ et $55,99\%$ pour les étiquettes « PressForward » et « FullSpeed » respectivement. Ceci suggère que la complexité supplémentaire a permis au modèle d’amplification de gradient à extraire des motifs moins évidents pour des étiquettes précises. Décrit visuellement, le modèle aurait découvert des motifs qui peuvent nettoyer une rangée des matrices de confusion de la @fig-model-stats à la fois.

## Que peut être déduit au sujet des affectants de l’étiquette résultante grâce aux modèles ?

En utilisant la technique d’explication SHAP sur le modèle d’amplification de gradients, avec les données d’entraînement et de test, nous pouvons ressortir l’importance de chaque variable sur la prédiction. Une haute importance signifie qu’une classe est précisément définie par la caractéristique; la caractéristique est intégrale^[Pas dans le sens mathématique d’une intégrale (soit $\int$).] à la prédiction de la classe. La @fig-importance-bar présente les importances moyennes de chaque variable.

![L'impacte moyenne de chaque variable sur la prédiction du modèle, soit moy(|valeur SHAP|)](rendered-figs/fig-bar.pdf){#fig-importance-bar width=100% fig-align='center'}

Nous pouvons constater que PercentRollUpperThird a une importance négligeable. Son maintien d’une variance nulle, mentionné dans la @sec-impossible, ne facilite aucunement la prédiction d’une étiquette.

Le « Tech », « SpeedTech », « Offroad » et « Fullspeed » ont de hautes importances en général, tandis que « LOL » n’en a que peu. Ceci est aussi reflété dans la @fig-model-stats, où ceux portant plus d’importances ont plus de prédictions valides et inversement pour le « LOL ». En nous basant sur le modèle, nous pouvons conclure que l’étiquette « LOL » est la moins bien définie. Il est notable que les deux étiquettes ayant le mot « technique » dans leur nom soient les mieux définies.

En nous fixant sur la @fig-importance-bar, le « Tech » est défini par sa vitesse latérale (`AvgAbsSpeedSideward`), son montant de pilotage (`AvgAbsSteer`) et son déplacement horizontal (`AvgAbsDisplacementHorizontal`). Cela n’implique pas que les valeurs de ces trois variables doivent s’élever pour prédire « Tech », mais plutôt que leur proximité aux valeurs attendues est priorisée par le modèle. En reliant les données de la @fig-violin-facet, le « Tech » est mieux défini par une moyenne de vitesses absolues latérale aux alentours de `{r} filter(dfTab, Tag == "Tech" & measure == "AvgAbsSpeedSideward")[["mean"]]` km/h, un pilotage absolu moyen aux alentours de `{r} filter(dfTab, Tag == "Tech" & measure == "AvgAbsSteer")[["mean"]] * 100` % et une moyenne de déplacements horizontaux près de `{r} filter(dfTab, Tag == "Tech" & measure == "AvgAbsDisplacementHorizontal")[["mean"]]` km.

Les mêmes étapes peuvent être appliquées aux autres étiquettes afin de les définir en quelque sorte.

Le « SpeedTech » est principalement défini par son utilisation de turbo (`PercentTurbo`) qui se situe autour de `{r} filter(dfTab, Tag == "SpeedTech" & measure == "PercentTurbo")[["mean"]] * 100` %. Il est aussi, mais avec moins d'ampleur, définie par un pilotage absolu moyen près de `{r} filter(dfTab, Tag == "Tech" & measure == "AvgAbsSteer")[["mean"]] * 100` %. Il est intéressant à noter que le « Tech » et le « SpeedTech », qui ont, les deux, des noms similaires, se différencient par leur accent sur la vitesse. Le « Tech » préfère beaucoup de virages, tandis que le « SpeedTech » préfère les turbos et des vitesses plus variées.

Le « Offroad » est caractérisé par sa moyenne de vitesses absolues latérale (`AvgAbsSpeedSideward`) et secondairement son biais moyen de pilotage (`AvgSteerBias`) ainsi que son biais moyen de vitesse latérale (`AvgSpeedSidewardBias`). Appliquant la logique des physiques du jeu, où il n’y a que peu de traction sur les routes de terre, la voiture devrait glisser souvent. Ceci n’est pas le cas, tout en ayant une importance notable pour ces caractéristiques. Les caractéristiques du « Offroad » devraient ainsi être explorées davantage afin de bien définir l’étiquette par moyen du cheminement de la voiture.

Le « Fullspeed » correspond à la première demie de nos hypothèses à son sujet. Bien qu’il ait des rotations qui correspondent à nos hypothèses, il est caractérisé principalement par sa vitesse élevée. Sa vitesse moyenne vers l’avant (`AvgSpeedForward`) le caractérisant est centrée à `{r} filter(dfTab, Tag == "Fullspeed" & measure == "AvgSpeedForward")[["mean"]]` km/h et présente un écart type élevé de `{r} filter(dfTab, Tag == "Fullspeed" & measure == "AvgSpeedForward")[["sd"]]`.

Le « Grass » et le « Normal » se rapprochent en leurs caractéristiques importantes. Les deux mettent l’accent sur la moyenne absolue de pilotage (`AvgAbsSteer`) et la moyenne absolue de vitesse avant (`AvgAbsSpeedForward`). Ils n’ont pas une forte importance, toutefois, les deux ont des vitesses et pilotages modérés.

Le « PressForward » est principalement caractérisé par sa moyenne absolue de pilotage. Bien que ce soit évident de supposer que c’est la seule étiquette où les joueurs n’appuient qu’une entrée, ce n’est pas entièrement le cas. Comme mentionné dans la @sec-variant, de nombreux joueurs appuient des entrées le long du cheminement, ce qui rend plus difficile la prédiction de cette étiquette.

Finalement, « LOL » est la seule étiquette sans caractéristiques notables découvertes par les modèles. En vérifiant avec la @fig-model-stats et le @tbl-rapport-classification, nous pouvons constater que c’est le pire estimé. Il est donc probable que l’étiquette « LOL » est un méli-mélo de styles de conduite.

Généralement, les caractéristiques se centrant sur la rotation de la voiture à un instant n’informent que peu de l’étiquette actuelle. En fait, ces six caractéristiques sont les six caractéristiques les pires pour la totalité des étiquettes. Il serait donc à réviser l’inclusion et l’implémentation de ceux-ci dans le cas d’un modèle futur.

# Résultats {#sec-result}

En fin de compte, les étiquettes de Trackmania Nations Forever sont distinctes, mais similaires. Bien que plusieurs de nos hypothèses ont été supportées par un modèle d’amplification de gradient — soit le modèle testé le plus représentatif —, de nombreux autres constats sont ressortis. Les étiquettes de circuits techniques sont les mieux définies, suivies d’étiquettes spécialisées (« Offroad », « Fullspeed » et « Grass »). Le « LOL », le moins bien défini, contient de nombreux styles très différents, lui faisant difficile à prédire correctement.

Le « Tech » préfère les virages. Son homologue, le « SpeedTech », est similaire, se différenciant par des vitesses plus élevées. Le « Fullspeed » se caractérise par de hautes vitesses. Les caractérisants du « Grass » et du « Normal » sont similaires, soit leur pilotage et leur vitesse, toutefois, leurs valeurs attendues diffèrent. Le « PressForward » est difficile à définir selon le modèle et les données en raison de hautes variances et des entrées inattendues selon le nom: le pilotage varie bien que le nom n’implique aucun pilotage. Le « Offroad » et le « LOL » nécessiteraient des recherches plus approfondies afin de conclure leurs caractéristiques principales.

# Discussion {#sec-discussion}

Les conclusions de définitions d’étiquettes décrites dans la @sec-result sont fondées sur des recherches antérieures et des données ressorties, aplaties, puis ajustées à des modèles prédictifs. Plusieurs biais peuvent ainsi entrer en jeu. En premier lieu, les caractéristiques à extraire dès les données hiérarchiques ont été déterminées subjectivement. Des projets statistiques antécédents posant sur Trackmania ont été consultés afin de réduire au maximum l’effet de cette subjectivité, toutefois, une certaine subjectivité est toujours présente. De plus, certains calculs, tels que la conversion de quaternions vers le tangage, lacet et roulis, préviennent l’obtention de certaines valeurs attendues — par exemple, le roulis au tiers supérieur (`PercentPitchUpperThird`). Ce serait ainsi préférable de générer systématiquement les caractéristiques afin de comparer méthodiquement l’importance d’un grand nombre de caractéristiques et en choisir les meilleures.

Notez qu’aucune inférence de causalité n’est possible puisque nous ne contrôlons pas les données récoltées. Nous ne pouvons pas assigner une vitesse moyenne pour une rediffusion, puis la modifier spécifiquement pour une autre. Plutôt, en raison de la nature observationnelle de cette étude, les corrélations sont inférées.

Tenant compte des biais, une version améliorée du modèle prédictif pourrait être utilisée afin de suggérer une étiquette aux nouveaux auteurs de circuits sur TMNF-X. Sachant que ce modèle ne prédit qu’une étiquette à la fois, seuls ceux ne sachant pas l’étiquette à assigner pourraient l’utiliser. Ce serait ainsi amplement plus utile si le modèle pouvait faire de la classification multiétiquette, telle que suggérée dans la @sec-which-model-hypothesis. De plus, le modèle en sa forme actuelle suggérait la mauvaise étiquette à environ un auteur sur vingt. L’ajout de détails au sujet du circuit, tel que les blocs, servirait mieux dans ce contexte et augmenterait probablement l’exactitude et la précision.

Tiagoeswc a annoncé un projet durant l’écriture de ce rapport qui pourrait complémenter les caractéristiques principales déterminées par les modèles d’amplification de gradients de notre étude. Inspiré à quantifier son niveau de jeu à Trackmania, Tiagoeswc a entrepris une expérience se posant sur l’évaluation de la compétence générale de joueurs de Trackmania [@TiagoTMSkill]. Dans la première partie de son expérience, il décide de chercher la compétence de joueurs pour toutes les étiquettes afin de simplifier la théorie. Avec les renseignements provenant de notre modèle, une transférabilité pourrait être possible vers la compétence par étiquette.

Avec la popularité croissante d’analyse statistique et d’application d’intelligence artificielle dans Trackmania, un modèle pourrait éventuellement générer le circuit [@TMTrackNN], le prochain conduire le circuit [@Linesight], puis le final, dont une amélioration de notre modèle, pourrait classifier le circuit avec les étiquettes appropriées. Toutes les étapes que suivent les auteurs de circuits, complétées sans joueur.



# Bibliographie {#sec-bib}

::: {#refs}
:::

# Annexe {#sec-annex}

## Programme d’échantillonnage {#sec-annex-a}

\hangindent=1.5em
\hangafter=1
Kmita, Nicolas. 2024. « StatsProjectTMNF ». \textit{Github}. [https://github.com/DarkMattrMaestro/Stats](https://github.com/DarkMattrMaestro/StatsProjectTMNF) [ProjectTMNF](https://github.com/DarkMattrMaestro/StatsProjectTMNF).

## Données {#sec-annex-d}

Les données aplaties utilisées pour l'entrainement et le test des modèles ainsi que des visualisations sont accessibles par [https://drive.google.com/file/d/1xbHTOrddKNGHkwa_qe0iCK4BVPzUMw5H/view?usp=sharing](https://drive.google.com/file/d/1xbHTOrddKNGHkwa_qe0iCK4BVPzUMw5H/view?usp=sharing).

Un certain montant des données hiérarchiques est accessible par [https://drive.google.com/file/d/1i7JCl4wkgP5POx9V_B7-xPKqwKJ61xZp/view?usp=sharing](https://drive.google.com/file/d/1i7JCl4wkgP5POx9V_B7-xPKqwKJ61xZp/view?usp=sharing). Notez que le programme d'échantillonnage ne sauvegardait pas toutes les données hiérarchiques vers le début de l'échantillonnage. Ainsi, certains échantillons qui se trouvent dans les données aplaties sont manquants dans les données hiérarchiques.

## Variables de base {#sec-annex-b}

Une majorité des variables sont extraites directement de fichiers GBX avec l’outil à source ouverte [GBX.NET2](https://github.com/BigBang1112/gbx-net) [@GBXNET]. Les spécifications de la relation de parenté entre les variables originales, soit des objets, se trouvent dans le répertoire du projet. Pour les échantillons, l’objet se nomme [CSceneVehicleCar.Sample](https://github.com/BigBang1112/gbx-net/blob/master/Src/GBX.NET/Engines/Scene/CSceneVehicleCar.Sample.cs) [@GBXNET].

\textbf{Étiquette - Qualitative nominale}\quad{} L’étiquette du circuit. (provenant de l’API de TMNF-X)

\textbf{EstTurbo - Qualitative nominale}\quad{} Booléen de la présence d’un turbo. (provenant de CGameGhost.Data.Sample.IsTurbo dans le fichier GBX)

\textbf{Durée - Quantitative discrète}\quad{} Durée totale de la rediffusion, ayant comme unité 10 millisecondes. (provenant de Time de la rediffusions dans le fichier GBX)

\textbf{Temps - Quantitative discrète}\quad{} Temps actuel de l’échantillon, ayant comme unité 10 millisecondes. (provenant de CGameGhost.Data.Sample.Time dans le fichier GBX)

\textbf{RPM - Quantitative continue}\quad{} Révolutions par minute du moteur de la voiture. (provenant de CGameGhost.Data.Sample.RPM dans le fichier GBX)

\textbf{Vitesse avant - Quantitative continue}\quad{} Vitesse vers l’avant de la voiture. (provenant de CGameGhost.Data.Sample.SpeedForward dans le fichier GBX)

\textbf{Vitesse latérale - Quantitative continue}\quad{} Vitesse vers le côté de la voiture, soit perpendiculaire à la direction dont la voiture se pointe. La vitesse pointe vers la gauche lorsque la vitesse est positive et vers la droite lorsque la vitesse est négative. (provenant de CGameGhost.Data.Sample.SpeedSideward dans le fichier GBX)

\textbf{Pilotage - Quantitative continue}\quad{} Le pilotage de la voiture, soit au travers du volan en-jeu. Un pilotage positif tourne vers la droite et un pilotage négatif tourne vers la gauche. (provenant de CGameGhost.Data.Sample.Steer dans le fichier GBX)

\textbf{Vitesse angulaire - Quantitative continue}\quad{} Vecteur vitesse angulaire en 3 dimensions. (provenant de CGameGhost.Data.Sample.AngularVelocity dans le fichier GBX)

\textbf{Tangage, lacet et roulis - Quantitative continue}\quad{} Tangage, lacet et roulis de la voiture. (conversion de CGameGhost.Data.Sample.Rotation en Euler)

\textbf{Position - Quantitative continue}\quad{} Position de la voiture à un instant en 3 dimensions. (provenant de CGameGhost.Data.Sample.Position dans le fichier GBX)

\textbf{}\quad{} 

## Variables aplaties {#sec-annex-c}

\newcommand{\vardef}[3]{\textbf{#1} \textcolor{gray}{$\in$ #3}\quad #2}

\vardef{AvgAbsDisplacementHorizontal}{Le déplacement horizontal absolu moyen (par unité de temps).}{$[0,\infty[$}

\vardef{AvgAbsDisplacementY}{Le déplacement vertical absolu moyen (par unité de temps).}{$[0,\infty[$}

\vardef{AvgRPM}{La moyenne des révolutions par minute du moteur de la voiture (par unité de temps).}{$[0,\infty[$}

\vardef{AvgSteerBias}{La moyenne du biais du pilotage, en pourcentage. Si le nombre d’entrées de droite équivaut à ceux de gauche, la valeur est 0. Si l’entrée de gauche ou de droite est tenue le long du cheminement, la valeur est 1.}{$[0,1]$}

\vardef{AvgAbsSteer}{La moyenne du pilotage, sans différenciation de direction, en pourcentage.}{$[0,1]$}

\vardef{AvgSpeedForward}{La moyenne de la vitesse avant. Une vitesse vers l’avant est positive et une vitesse reculée est négative.}{$]-\infty,\infty[$}

\vardef{AvgAbsSpeedForward}{La moyenne absolue des vitesses avant.}{$[0,\infty[$}

\vardef{AvgSpeedSidewardBais}{La moyenne absolue du biais de la vitesse latérale de la voiture. Si la somme des vitesses latérales vers la gauche équivaut à la somme de ceux de droite, la valeur est 0.}{$[0,\infty[$}

\vardef{AvgAbsSpeedSideward}{La moyenne absolue des vitesses latérales.}{$[0,\infty[$}

\vardef{AvgSpeedSidewardOppSteer}{L'inclinaison moyenne de l'opposition des directions de la vitesse latérale et du pilotage. La valeur tend vers 1 lorsqu’ils sont du même signe et vers -1 lorsqu’ils sont de signes différents.}{$[-1, 1]$}

\vardef{PercentPitch——Third}{Le pourcentage des d’unités de temps où le tangage absolu se trouve dans le tiers désigné, soit le premier, deuxième ou troisième tiers.}{$[0, 1]$}

\vardef{PercentRoll——Third}{Le pourcentage des d’unités de temps où le roulis absolu se trouve dans le tiers désigné, soit le premier, deuxième ou troisième tiers.}{$[0, 1]$}

\vardef{PercentTurbo}{Le pourcentage d’unités de temps où la voiture est sous l’effet d’un turbo.}{$[0, 1]$}
