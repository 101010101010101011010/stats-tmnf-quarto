---
title: Classification de toute allure!
subtitle: Une analyse de la relation entre l’étiquette et le cheminement de circuits dans Trackmania Nations Forever utilisant la classification
highlight-style: github
authors:
  - name: Nicolas Kmita
    affiliation: École secondaire Franco-Cité
bibliography:
  - references.bib
  - packages.bib
nocite: |
  @*
notebook-links: false
lang: fr
format:
  titlepage-pdf:
    include-in-header:
      - text: |
          \usepackage{xcolor}
          \usepackage{lipsum}
      - macros.tex
    documentclass: scrbook
    classoption: ["oneside", "open=any"]
    number-sections: true
    toc: true
    toc-title: "Table des matières"
    lof: false
    lot: false
    titlepage: classic-lined 
    titlepage-logo: "img/car-jump.png"
    titlepage-theme:
      elements: ["\\titleblock", "\\authorblock", "\\logoblock", "\\footerblock"]
      page-align: "center"
      title-style: "doublelinewide"
      title-fontsize: 30
      title-fontstyle: "uppercase"
      title-space-after: "0.1\\textheight"
      subtitle-fontstyle: ["Large", "textit"]
      author-style: "plain"
      author-sep: "\\hskip1em"
      author-fontstyle: "Large"
      author-space-after: "2\\baselineskip"
      affiliation-style: "numbered-list-with-correspondence"
      affiliation-fontstyle: "large"
      affiliation-space-after: "0pt"
      footer-style: "plain"
      footer-fontstyle: ["large", "textsc"]
      footer-space-after: "0pt"
      logo-size: "0.7\\textheight"
      logo-space-after: "1cm"
    titlepage-footer: |
      M. Chabot\
      MDM4U\
      25 octobre 2024\
    keep-tex: true
---

```{r}
# Préparation de librairies et installations variés

cran_mirror <- "https://mirror.csclub.uwaterloo.ca/CRAN/"

pkgs <- c(
  "tidyverse",
  "ggbeeswarm", # Génère des graphique d'essaim d'abeille
  "viridis", # Couleurs pouvant être mieux perçus
  "kableExtra",
  "rmarkdown",
  "knitr", # Tableaux
  "tinytex",
  "reshape"
)

# Charger les « packages » et, s'ils ne sont pas installés, les installer du mirroir de CRAN indiqué ci-haut (UWaterloo par défaut).
for(pkg in pkgs) {
  # Voir https://stackoverflow.com/questions/4090169/elegant-way-to-check-for-missing-packages-and-install-them

  if(require(pkg, character.only=TRUE)){
    next
  }

  install.packages(pkg, repos=cran_mirror)
  library(pkg, character.only=TRUE)
}
# update.packages(ask = FALSE, repos=cran_mirror)

# Assurer la présence de TinyTeX
if (nchar(tinytex_root()) <= 0) {
  install_tinytex()
}

# Génération de citations
knitr::write_bib(pkgs, prefix="", file="packages.bib", tweak=FALSE)
```

```{r}
# Assurer l'utilisation des virgules par les sorties

inline_hook_old <- knit_hooks$get("inline")

format_d <- function(x) {
  if (is.numeric(x)) {
    return(str_replace_all(str_replace_all(sprintf("%.2f", x), "[.]", ","), ",00", ""))
  }

  return(x)
}

kable_fr <- function(x, ...) {
  # Alignement selon la type de valeur
  alignment <- ""
  for(i in 1:ncol(x)) {
    if (is.numeric(x[,i])) {
      alignment <- paste(alignment, "r", sep="")
    } else {
      alignment <- paste(alignment, "l", sep="")
    }
  }

  x %>%
    mutate_all(~format_d(.)) %>%
    kable(align=alignment, "pipe", ...)
}

decimal_hook <- function (x) {
  if (is.numeric(x) | is.double(x) | is.integer(x)) {
    # Si un entier, imprimer sans ponctuation decimale; autrement ajouter deux chiffres décimaux
    res <- ifelse(x == round(x),
      sprintf("%d", x),
      str_replace_all(sprintf("%.2f", x), "[.]", ",")
    )
    paste(res, collapse = ", ")
  } else {
    inline_hook_old(x)
  }
}

knit_hooks$set(inline = decimal_hook)
```

```{r}
# Préparation aesthétique

theme_set(theme_classic())

# Échellex de couleur


# Utilisation d'une graine aléatoire déterminée
set.seed(3142)

```

```{r}
# Fonctions générales

# Mode pour les facteurs
Mode <- function(x) {
  ux <- unique(x)
  return(ux[which.max(tabulate(match(x, ux)))])
}
```

```{r}
#| echo: FALSE

flat_data <- read.csv("./collected-data/flat-replay-data-100per.csv", header=TRUE)

flat_data_min <- apply(flat_data, 2, min)
flat_data_max <- apply(flat_data, 2, max)

norm2 <- function(x, na.rm = FALSE) (x - min(x, na.rm = na.rm)) / (max(x, na.rm = na.rm) - min(x, na.rm = na.rm))
normalized_flat_data <- flat_data %>% mutate_if(is.numeric, norm2)
```

# Introduction

`{r} 123.4567`

# Méthodes

\lipsum

# Résultats

```{r}
#| label: fig-violin
#| echo: FALSE
#| fig-cap: "Distributions des variables quantitatives continues des pingouins Palmer selon l'espèce. Les barres rouges indiquent l'allonge de l'écart type, les lignes noires horizontales de chaque violon indiquent les quartiles, et les points rouges sont les moyennes."
#| fig-subcap:
#|    - "Longueurs de becs des pingouins Palmer selon l'espèce."
#| out-width: '100%'
#| out-height: '100%'
#| fig-align: 'center'
#| layout-nrow: 1

# dfTab <- flat_data %>% group_by(species) %>%
#   summarize(
#     y = max(bill_length_mm) + 1,
#     mean = mean(bill_length_mm),
#     sd = round(sd(bill_length_mm), digits = 2)
#   )

library(reshape)
meltData <- melt(normalized_flat_data)
# boxplot(data=meltData, value~variable)

non_tag_names <- c("AvgAbsDisplacementHorizontal","AvgAbsDisplacementY","AvgRPM","AvgSteerBias","AvgAbsSteer","AvgSpeedForward","AvgAbsSpeedForward")#,"AvgSpeedSidewardBias","AvgAbsSpeedSideward","AvgSpeedSidewardOppSteer","PercentPitchLowerThird","PercentPitchMiddleThird","PercentPitchUpperThird","PercentRollLowerThird","PercentRollMiddleThird","PercentRollUpperThird","PercentTurbo")

flat_data_long <- gather(flat_data, key="measure", value="value", non_tag_names)

ggplot(flat_data_long, aes(x=Tag, y=value)) + #  %>% group_by(Tag)
  # Diagrammes
  # geom_boxplot() +
  geom_quasirandom(width = 0.2, alpha = 0.2, size=0.2) +
  geom_violin(draw_quantiles = c(0.25, 0.5, 0.75), size=0.2, colour="red", fill = NA, scale="count") +
  facet_wrap(~measure, scales="free_y", ncol=1) +

  # # Écart type / barres d'érreure
  # geom_errorbar(data=dfTab, aes(x=species, y=mean, ymin=mean-sd, ymax=mean+sd), width=.2, linewidth=.3, colour="red") +
  # geom_point(data=dfTab, aes(x=species, y=mean), size=0.5, colour="red") +
  # # Anotation de l'écart type
  # geom_text(data=dfTab,aes(x=species,y=y,parse=FALSE,label=sprintf("s = %.2f", dfTab$sd)),vjust=0) +

  # Thèmes
  theme(
    axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)
    # legend.position = c(0.10, 0.80),
    # legend.background = element_rect(colour = "black")
  )

  # Anotations
  # labs(
  #   title = "Longueurs de becs par rapport à l'espèce",
  #   x = "Espèce",
  #   y = "Longueur du bec (mm)",
  #   colour = "Sexe"
  # )

```

<!-- ```{r}
#| label: fig-violin
#| echo: FALSE
#| fig-cap: "Distributions des variables quantitatives continues des pingouins Palmer selon l'espèce. Les barres rouges indiquent l'allonge de l'écart type, les lignes noires horizontales de chaque violon indiquent les quartiles, et les points rouges sont les moyennes."
#| fig-subcap:
#|    - "Longueurs de becs des pingouins Palmer selon l'espèce."
#| out-width: '100%'
#| fig-align: 'center'
#| layout-nrow: 1

# dfTab <- flat_data %>% group_by(species) %>%
#   summarize(
#     y = max(bill_length_mm) + 1,
#     mean = mean(bill_length_mm),
#     sd = round(sd(bill_length_mm), digits = 2)
#   )

library(reshape)
meltData <- melt(normalized_flat_data)
# boxplot(data=meltData, value~variable)

ggplot(meltData, aes(factor(variable), value)) +
  # Diagrammes
  # geom_boxplot() +
  geom_quasirandom(width = 0.2, alpha = 0.2) +
  geom_violin(draw_quantiles = c(0.25, 0.5, 0.75), colour="red", fill = NA, scale="count") +
  facet_grid(rows = meltData$Tag) +

  # # Écart type / barres d'érreure
  # geom_errorbar(data=dfTab, aes(x=species, y=mean, ymin=mean-sd, ymax=mean+sd), width=.2, linewidth=.3, colour="red") +
  # geom_point(data=dfTab, aes(x=species, y=mean), size=0.5, colour="red") +
  # # Anotation de l'écart type
  # geom_text(data=dfTab,aes(x=species,y=y,parse=FALSE,label=sprintf("s = %.2f", dfTab$sd)),vjust=0) +

  # Thèmes
  theme(
    axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)
    # legend.position = c(0.10, 0.80),
    # legend.background = element_rect(colour = "black")
  ) +

  # Anotations
  labs(
    title = "Longueurs de becs par rapport à l'espèce",
    x = "Espèce",
    y = "Longueur du bec (mm)",
    colour = "Sexe"
  )

``` -->

# Discussion



# Conclusion



# Références

::: {#refs}
:::
