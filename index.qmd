---
title: Classification de toute allure!
subtitle: Une analyse de la relation entre l’étiquette et le cheminement de circuits dans Trackmania Nations Forever utilisant la classification
highlight-style: github
authors:
  - name: Nicolas Kmita
    affiliation: École secondaire Franco-Cité
bibliography:
  - references.bib
  - packages.bib
bibliographystyle: apa
nocite: |
  @*
notebook-links: false
lang: fr
tbl-cap-location: bottom
format:
  titlepage-pdf:
    pdfengine: xelatex
    include-in-header:
      - text: |
          \usepackage{xcolor}
          \usepackage{lipsum}
          \usepackage{glossaries}
      - macros.tex
    documentclass: scrreprt
    classoption: ["oneside", "open=any"]
    number-sections: true
    toc: true
    toc-title: "Table des matières"
    lof: false
    lot: false
    titlepage: classic-lined 
    titlepage-logo: "img/car-jump.png"
    titlepage-theme:
      elements: ["\\titleblock", "\\authorblock", "\\logoblock", "\\footerblock"]
      page-align: "center"
      title-style: "doublelinewide"
      title-fontsize: 30
      title-fontstyle: "uppercase"
      title-space-after: "0.1\\textheight"
      subtitle-fontstyle: ["Large", "textit"]
      author-style: "plain"
      author-sep: "\\hskip1em"
      author-fontstyle: "Large"
      author-space-after: "2\\baselineskip"
      affiliation-style: "numbered-list-with-correspondence"
      affiliation-fontstyle: "large"
      affiliation-space-after: "0pt"
      footer-style: "plain"
      footer-fontstyle: ["large", "textsc"]
      footer-space-after: "0pt"
      logo-size: "0.7\\textheight"
      logo-space-after: "1cm"
    titlepage-footer: |
      M. Chabot\
      MDM4U\
      25 octobre 2024\
    keep-tex: true
    geometry:
      - showframe
      - inner=2cm
      - outer=2cm
      - top=3cm
      - bottom=4cm
      - headsep=22pt
      - headheight=11pt
      - footskip=33pt
      - ignorehead
      - ignorefoot
      - heightrounded
    indent: false
---

```

```

```{r}

# Préparation de librairies et installations variés

cran_mirror <- "https://mirror.csclub.uwaterloo.ca/CRAN/"

pkgs <- c(
  "tidyverse",
  "ggbeeswarm", # Génère des graphique d'essaim d'abeille
  "viridis", # Couleurs pouvant être mieux perçus
  "kableExtra",
  "rmarkdown",
  "knitr", # Tableaux
  "tinytex",
  "reshape",
  "ggh4x",
  "reticulate",
  "rjson",
  "janitor"
)

# Charger les « packages » et, s'ils ne sont pas installés, les installer du mirroir de CRAN indiqué ci-haut (UWaterloo par défaut).
for(pkg in pkgs) {
  # Voir https://stackoverflow.com/questions/4090169/elegant-way-to-check-for-missing-packages-and-install-them

  if(require(pkg, character.only=TRUE)){
    next
  }

  install.packages(pkg, repos=cran_mirror)
  library(pkg, character.only=TRUE)
}
# update.packages(ask = FALSE, repos=cran_mirror)

# Assurer la présence de TinyTeX
if (nchar(tinytex_root()) <= 0) {
  install_tinytex()
}

# Génération de citations
knitr::write_bib(pkgs, prefix="", file="packages.bib", tweak=FALSE)
```

```{r}
# Assurer l'utilisation des virgules par les sorties

inline_hook_old <- knit_hooks$get("inline")

format_d <- function(x) {
  if (is.numeric(x)) {
    return(str_replace_all(str_replace_all(sprintf("%.2f", x), "[.]", ","), ",00", ""))
  }

  return(x)
}

kable_fr <- function(x, ...) {
  # Alignement selon la type de valeur
  alignment <- ""
  for(i in 1:ncol(x)) {
    if (is.numeric(x[,i])) {
      alignment <- paste(alignment, "r", sep="")
    } else {
      alignment <- paste(alignment, "l", sep="")
    }
  }

  x %>%
    mutate_all(~format_d(.)) %>%
    kable(align=alignment, "pipe", ...)
}

decimal_hook <- function (x) {
  if (is.numeric(x) | is.double(x) | is.integer(x)) {
    # Si un entier, imprimer sans ponctuation decimale; autrement ajouter deux chiffres décimaux
    res <- ifelse(x == round(x),
      sprintf("%d", x),
      str_replace_all(sprintf("%.2f", x), "[.]", ",")
    )
    paste(res, collapse = ", ")
  } else {
    inline_hook_old(x)
  }
}

knit_hooks$set(inline = decimal_hook)
```

```{r}
# Préparation aesthétique

theme_set(theme_classic())

# Échellex de couleur


# Utilisation d'une graine aléatoire déterminée
set.seed(3142)

```

```{r}
# Fonctions générales

# Mode pour les facteurs
Mode <- function(x) {
  ux <- unique(x)
  return(ux[which.max(tabulate(match(x, ux)))])
}
```

```{r}
#| echo: FALSE

flat_data <- 
  read.csv("./collected-data/flat-replay-data-5rep.csv", header=TRUE) %>%
  mutate(
    Tag=recode(Tag,
      `0`="Normal",
      `3`="Offroad",
      `5`="Fullspeed",
      `6`="LOL",
      `7`="Tech",
      `8`="SpeedTech",
      `10`="PressForward",
      `12`="Grass",
    )
  )

flat_data_min <- apply(flat_data, 2, min)
flat_data_max <- apply(flat_data, 2, max)

norm2 <- function(x, na.rm = FALSE) (x - min(x, na.rm = na.rm)) / (max(x, na.rm = na.rm) - min(x, na.rm = na.rm))
normalized_flat_data <- flat_data %>% mutate_if(is.numeric, norm2)
```

# Glossaire

\textbf{API}\quad{} Une API, soit une interface de programmation d’applications, est l’interface entre un programme et un autre. Dans le cas de cet article, l’API de TMNF-X est l’interface utilisée pour communiquer avec la base de données de TMNF-X.

\quad

\textbf{Étiquette}\quad{} L’étiquette, ou « tag » en anglais, est le descripteur principal d’un circuit. Il n’y a pas de définitions officielles des différentes étiquettes de Trackmania Nations Forever, toutefois, l’installation Trackmania 2020 a été fournie quelques définitions des mêmes étiquettes. Les définitions fournies pour Trackmania 2020 ne sont pas compatibles avec TMNF en raison des différences majeures entre les deux installations.

Le nom étiquette peut mener à confusion en discutant de modèles de classification puisqu’il y a la classification à classes multiples et à étiquettes multiples. Les deux catégories de modèles sont entièrement différentes. Le modèle d’amplification de gradients que nous utilisons plus tard dans ce rapport utilise des classes multiples. Ainsi, l’utilisation du terme « étiquette » en discutant du modèle fait référence aux étiquettes de Trackmania et non des étiquettes par rapport aux statistiques.

\quad

\textbf{TMNF}\quad{} TMNF est l’abréviation du titre Trackmania Nations Forever, le jeu de course d’arcade analysé dans cet article.

\quad

\textbf{TMNF-X}\quad{} Le site Internet a pour but de partager, entre joueurs, les créations reliées à Trackmania Nations Forever.

\quad

\textbf{Trackmania 2020}\quad{} L’installation du jeu Trackmania publié en 2020.

\quad

\textbf{Rediffusion}\quad{} Une rediffusion du chemin que parcourt un joueur. Aussi appelée « replay ».

# Introduction {#sec-intro}

Trackmania Nations Forever est la neuvième installation dans la série de jeux vidéo Trackmania. Ce jeu de course d’arcade, sortie en 2008, n’a que quatre entrées possibles: avancer, reculer, tourner vers la gauche, et tourner vers la droite. C’est ainsi un jeu très abordable pour des débutants. Il y a pourtant diverses fonctionnalités internes qui lui donnent un plafond de compétences très élevé.

L’analyse statistique est très courante dans la série Trackmania afin de s’améliorer au jeu, pour pousser les limites du possible, ou simplement pour explorer une curiosité. Des joueurs, tels que JstAnothrVirtuoso [@JstAnothr] et Yosh [@Yosh], et des projets comme Linesight [@Linesight] sont de bons exemples. Ces deux derniers ont même agi comme sources d’inspiration pour le thème général de ce projet. Il y a également des outils tels que TMDojo [@TMDojo] pour l’installation Trackmania de 2020 qui servent à donner de la rétroaction rapide aux joueurs sur des circuits variés.

Les joueurs peuvent créer leurs propres circuits, ainsi que de les publier sur des plateformes telles que Trackmania Nations Forever Exchange, abrégé à TMNF-X. Les auteurs catégorisent leur circuit selon le style et but, soit sous une étiquette. Il est à noter que les étiquettes n’ont pas de définitions exactes, et que plus d’une étiquette peut être assignée par circuit. Des étiquettes pourraient être « Fullspeed », « LOL » ou un certain nombre d’autres qui sont indiquées dans la [Section @sec-method].

Les étiquettes sont donc choisies selon l’opinion subjective de l’auteur des étiquettes les plus appropriées. Les auteurs utilisent leur interprétation des différences entre les caractéristiques de chaque étiquette de circuit. Il est ainsi à se demander quelles caractéristiques principales du cheminement de la voiture influencent l’étiquette du circuit. Cette étude explora les relations entre le cheminement de la voiture et l’étiquette du circuit.

## Définir un joueur compétent

Il faut d’abord définir les joueurs compétents, ceux auxquels les rediffusions seront tirées.

Un joueur compétent devra être assez pratiqué à Trackmania Nations Forever afin de bien représenter un circuit donné. Un joueur non compétent, au contraire, ne pourra pas effectivement compléter un circuit sans faire des actions aberrantes, telles qu’entrer en collision avec des murs ou ralentir la voiture. Ce contraste permet de définir un joueur compétent par négation: c’est un joueur qui ne fait peu d’erreurs.

Notez que cette définition est subjective et ne représente pas tous les joueurs compétents. C’est une définition à but d’augmenter la représentativité du circuit par le cheminement de la voiture du joueur considéré compétent.

La sélection de rediffusions de joueurs compétents est embrouillée par le manque d’informations contextuelles ; le rang du joueur, son temps total dans le jeu, et autres tels critères ne sont pas facilement découvrables en cherchant un circuit donné et, plus important encore, ces critères identifieraient les joueurs. Il est donc à faire recours à des critères présentés pour chaque fichier de rediffusion.

Nous avons choisi de filtrer selon le nombre de joueurs ayant soumis une rediffusion pour un circuit donné sur TMNF-X. Ce critère est (assez) simple à filtrer au travers de l’API de TMNF-X et permet aux rediffusions de rapprocher le cheminement le plus représentatif du circuit. Le plus de rediffusions soumises, le plus haut le niveau de compétition et, donc, le plus représentatif la rediffusion. Afin de bien équilibrer une sélection représentative des circuits^[Une filtration trop restrictive limitera les circuits sélectionnés à ceux qui sont très fameux, ayant des milliers de rediffusions soumis, plutôt que ceux qui ont une ou deux bonnes rediffusions.] et la qualité des rediffusions^[Les circuits ayant des milliers de rediffusions tendent, de notre expérience, à avoir des rediffusions poussées aux limites du possible.], un joueur compétent sera défini, dans cet article, en tant qu’un joueur tenant le record sur un circuit donné, où ce circuit comporte au minimum cinq records soumis. En choisissant cinq comme nombre minimal de rediffusions, nous espérons minimiser le nombre de records insuffisamment représentatifs d’un circuit par des joueurs ayant moins d’expérience.

Il est à noter qu’il se pourrait, toutefois, que plus de cinq joueurs débutants décident, par chance ou par exprès, de soumettre leurs records sur le même circuit.

## Questions

Cette section couvre les questions provoquant l’étude actuelle.

### Exploration pré-modèle

Il est fort probable que certaines techniques soient discernables avec les variations de variables récoltées. Une telle technique pourrait être la « grass-slide », où la voiture est positionnée à 90° et fait un virage agressif [@Tunachopps]. Dans ce cas, nous estimons une hausse de vitesse angulaire et de vitesse latérale comparée au restant du circuit. D’autres techniques/bogues potentiellement discernables seraient la « edge-bogue », la « uber-bogue » et la « nose-bogue » qui changent drastiquement le vecteur vitesse^[Pour une démonstration, voir la vidéo par Kimura et al.]. Un aperçu de la distribution de bogues ou autres provoquant de grands changements sera visible par des graphiques à violons multiples de la différence maximale et moyenne de vecteur vitesse selon l’étiquette et de la différence maximale et moyenne de vitesse latérale selon l’étiquette. Sachant que la définition de l’étiquette « PressForward » dans Trackmania 2020 indique la présence d’acrobaties normalement impossibles manuellement, il est probable que de tels changements drastiques de vitesse soient présents.

## Quel modèle de classification servira le mieux ?

Plusieurs méthodes de classification de points de données existent, ayant tous leurs cas d’utilisation, avantages et désavantages différents. Pour le cas de la classification du cheminement dans une étiquette, il y a cinq exigences principales.

Le modèle doit d’abord \textbf{classifier de manière tabulaire} afin de pouvoir utiliser les données récoltées (« What is Tabular Classification? »). De tels modèles sont les Transformeurs tabulaires et k-NN [@KeitaIntroClassification], etc.

Afin de réduire la complexité de l’analyse et de mener à un meilleur contraste entre les étiquettes, le modèle devra \textbf{prédire une étiquette}. Le modèle devrait pouvoir faire de la classification à classe multiple afin de gérer le nombre d’étiquettes possibles plus grand que deux^[Soit une variable nominale non binaire.] @KeitaIntroClassification. En raison de la nécessité d’une exclusivité mutuelle entre les classes @KeitaIntroClassification pour la classification à classes multiples, les circuits sélectionnés devront être filtrés afin de ne garder que les circuits ayant une seule étiquette assignée. De tels algorithmes, lorsque mis en série, sont la forêt aléatoire, Bayes naïf, k-NN et amplification de gradients. Il est à noter que la classification à étiquette multiple, telle que l’amplification de gradients multiétiquettes @KeitaIntroClassification, serait préférable afin de prédire et gérer plusieurs étiquettes simultanément. Toutefois, ceci mènerait à une complexité hors de la portée de ce projet.

Le modèle serait préférablement un \textbf{apprenant avide} afin de présenter des tendances dans les données plutôt que de simplement prédire selon les points de données les plus proches @KeitaIntroClassification. Une majorité des modèles respectent cette exigence, notamment à l’exception du modèle k-NN qui est relativement simple comparé aux autres modèles, mais qui cherche le voisin le plus près.

Le modèle devrait préférablement être \textbf{explicable}, soit par l’utilisation d’une IAX (Keita). Puisque l’étude actuelle vise non seulement à prédire l’étiquette, mais également à comprendre ce qui influe un choix d’étiquette, il est préférable qu’une interprétabilité soit facilitée pour le modèle choisi. Les IAXs sont habituellement des outils post-prédiction servant à expliquer le raisonnement d’un modèle, donc elles peuvent fonctionner avec une majorité des modèles existants. Des exemples de techniques IAX sont SHAP (Awan), LIME et l’explication contrefactuelle (Keita).


# Méthodologie {#sec-method}



# Résultats {#sec-result}

```{r}
#| label: fig-violin-facet
#| echo: FALSE
#| fig-cap: "Les distributions relatives (relatives aux minimums et maximums) des valeurs de chaque variable selon l'étiquette. Les barres rouges représentent l'écart type distancé de la moyenne."
#| fig-width: 8
#| fig-height: 10
#| out-width: '100%'
#| fig-align: 'center'
#| layout-nrow: 1

# TODO: Add units
facet_ordered_colnames <- c("AvgAbsDisplacementHorizontal","AvgAbsDisplacementY","AvgRPM","AvgSteerBias","AvgAbsSteer","AvgSpeedForward","AvgAbsSpeedForward","AvgSpeedSidewardBias","AvgAbsSpeedSideward","AvgSpeedSidewardOppSteer","PercentPitchLowerThird","PercentRollLowerThird","PercentPitchMiddleThird","PercentRollMiddleThird","PercentPitchUpperThird","PercentRollUpperThird","PercentTurbo")

facet_ordered_colours <- c(NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, "#ffb3b333", "#b3dfff33", "#ffb3b333", "#b3dfff33", "#ffb3b333", "#b3dfff33", NA)

flat_data_long <- gather(flat_data, key="measure", value="value", facet_ordered_colnames)# colnames(flat_data)[!(colnames(flat_data) %in% c("Tag"))])

dfTab <- flat_data_long %>% group_by(Tag, measure) %>%
  summarize(
    mean = mean(value),
    sd = sd(value)
  )

ggplot(flat_data_long, aes(x=Tag, y=value)) + #  %>% group_by(Tag)
  # Diagrammes
  # geom_boxplot() +
  # geom_quasirandom(width = 0.2, alpha = 0.2, size=0.2) +
  geom_violin(
    draw_quantiles = c(0.25, 0.5, 0.75),
    size=0.2,
    colour="black",
    fill = NA,
    scale="width"
  ) + # TODO: Find more representative scale type
  facet_wrap2(
    ~forcats::fct_relevel(measure, facet_ordered_colnames),
    scales="free_y",
    ncol=2,
    strip=strip_themed(
      background_x = elem_list_rect(fill = facet_ordered_colours)
    )
  ) +

  # # Écart type / barres d'érreure
  geom_errorbar(
    data=dfTab,
    aes(x=Tag, y=mean, ymin=mean-sd, ymax=mean+sd),
    width=.2,
    linewidth=.2,
    colour="red"
  ) +
  geom_point(data=dfTab, aes(x=Tag, y=mean), size=0.3, colour="red") +
  # # Anotation de l'écart type
  # geom_text(data=dfTab,aes(x=species,y=y,parse=FALSE,label=sprintf("s = %.2f", dfTab$sd)),vjust=0) +

  # Thèmes
  theme(
    axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)
    # legend.position = c(0.10, 0.80),
    # legend.background = element_rect(colour = "black")
  ) +

  # Anotations
  labs(
    title = "Distributions relatives de chaque variable",
    x = "Étiquette",
    y = "Valeur"
  )

```

![Les matrices de confusion des trois modèles statistiques utilisés: un simulacre simple, une régression logistique, et un amplification de gradients (XGBoost).](rendered-figs/fig-model-stats.pdf){#fig-model-stats out-width=100% fig-align='center'}

```{r}
#| label: tbl-rapport-classification
#| exho: FALSE
#| tbl-cap: "La précision et le rappel de chaque model selon la variable, en pourcentage (%)."
#| out-width: '100%'
#| tbl-align: 'center'

report_df <- read.csv(file="models/report_object.csv", header=TRUE)

report_pivot_df <- report_df %>%
  mutate(
    precision = precision * 100,
    recall = recall * 100,
    f1 = f1 * 100,
    support = support * 100
  ) %>%
  select(model:recall) %>%
  pivot_wider(
    names_glue = "{model}_{.value}",
    names_from=model,
    values_from=c(precision, recall),
    names_sort=TRUE,
    names_vary = 'slowest'
  )

report_pivot_df %>%
  filter(!(variable %in% c("weighted avg"))) %>%
  mutate(
    variable=recode(variable,
      `0.0`="Normal",
      `1.0`="Offroad",
      `2.0`="Fullspeed",
      `3.0`="LOL",
      `4.0`="Tech",
      `5.0`="SpeedTech",
      `6.0`="PressForward",
      `7.0`="Grass",
      `macro avg`="Moyenne"
    )
  ) %>%
  kable_fr(col.names = c("Étiquette", rep(c("Précision", "Rappel"), 3))) %>% #, "F1", "Support"
  add_header_above(
    header=c(" ", 
      "Simulacre"=2, 
      "Régression\nlogistique"=2,
      "Amplification\nde gradients"=2
    )
  ) %>%
  row_spec(9, bold=TRUE, background="#e6e6e6")

```

![La moyenne absolue des valeurs SHAP de chaque variable indépendante.](rendered-figs/fig-bar.pdf){#fig-importance-bar out-width=100% fig-align='center'}

![Les corrélations entre la valeur SHAP et la valeur de chaque variable. Les barres grises indiquent la dansité.](rendered-figs/fig-scatter.pdf){#fig-scatter out-width=100% fig-align='center'}

![................](rendered-figs/fig-violin.pdf){#fig-violin out-width=100% fig-align='center'}

![................](rendered-figs/fig-waterfall-0.pdf){#fig-waterfall-0 out-width=100% fig-align='center'}

# Discussion {#sec-discussion}



# Conclusion {#sec-conclusion}



# Bibliographie {#sec-bib}

::: {#refs}
:::

# Annexe {#sec-annex}

